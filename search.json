[{"title":"面向对象","url":"/post/38994.html","content":"<p>简述：<br>\n完成对面向对象的笔记</p>\n<span id=\"more\"></span>\n<h2 id=\"c++\">c++</h2>\n<h2 id=\"面向对象--- 上\">面向对象 – 上</h2>\n<p>目标：培养良好的编程习惯</p>\n<p>良好的方式编写class</p>\n<p>带指针和不带指针的类<br>\n—learn m<br>\n基于对象 类</p>\n<p>面向对象 封装 继承 多态</p>\n<p>历史：</p>\n<p>建立在c语言之上</p>\n<p>new c --》c with class -》c++</p>\n<p>演化：</p>\n<p>c++98 （1.0）</p>\n<p>c++11 （2.0）</p>\n<p>语言+标准库</p>\n<p>数据和函数包在一起 --》class struct --》创建很多objects</p>\n<p>不带指针的 --》复数</p>\n<p>带指针的 --》字符串</p>\n<p>基于对象</p>\n<p>class without pointer --》complex</p>\n<p>c++代码的基本形式：</p>\n<p>头文件</p>\n<p>主程序</p>\n<p>标准库</p>\n<p>文件的拓展名不重要</p>\n<p>c++输出</p>\n<h2 id=\"标准库\">标准库</h2>\n<p>泛型编程 --&gt; template</p>\n<p>使用c++标准库</p>\n<p>认识c++标准库</p>\n<p>良好使用c++标准库</p>\n<p>拓展c++标准库</p>\n<p>标准库 &gt; stl库</p>\n<p>标准库以头文件形式呈现</p>\n<p>c++头文件不带 .h</p>\n<p>新版c的库也不带 .h 改为cmath</p>\n<p>旧的形式仍然可以使用</p>\n<p>命名空间 一般标准库都封装在std名称空间中 在使用时需要使用全称</p>\n<p>可以简化 using namespace std;</p>\n<p>stl的体系结构：</p>\n<p>六大组件：</p>\n<p>容器 containers  == 数据结构</p>\n<p>–》看不到内存的事情 需要分配器来支持他</p>\n<p>操作：函数 算法来操作容器</p>\n<p>设计方法与oop的思想是不一样的  --》泛型编程 模板编程</p>\n<p>容器–》数据</p>\n<p>算法–》操作</p>\n<p>桥梁–》迭代器 泛化的指针</p>\n<p>分配器 allocators ：为容器分配内存空间</p>\n<p>算法 algorithms</p>\n<p>迭代器 iterators</p>\n<p>适配器 adapters 执行转换功能</p>\n<p>仿函数 functors 作用像是一个函数，执行操作</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310200907136.png\" alt=\"image-20230310200907136\"></p>\n<p>程序=数据结构+算法</p>\n<p>分配器作为容器模板的一个参数，可以不写，默认自带</p>\n<p>容器和分配器的类型要匹配</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310203047791.png\" alt=\"image-20230310203047791\"></p>\n<p>算法复杂度：大O表示法</p>\n<p>其中的n必须很大很大 才能展现出复杂度等级</p>\n<p>区间：</p>\n<p>容器 ： 左闭右开区间</p>\n<p>begin指向第一个元素</p>\n<p>end指向最后的元素的下一个位置</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310203709854.png\" alt=\"image-20230310203709854\"></p>\n<p>iterator 泛化的指针 能做很多事情</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310204259123.png\" alt=\"image-20230310204259123\"></p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310204518838.png\" alt=\"image-20230310204518838\"></p>\n<h3 id=\"容器\">容器</h3>\n<p>结构+分类</p>\n<p>sequence containers</p>\n<ol>\n<li>array 数组包装成class 无法扩充</li>\n<li>vector 从最后可以扩充 空间自动增长  （分配器的作用） --》栈</li>\n<li>deque 双向队列 两端可进可出</li>\n<li>list 双向链表</li>\n<li>forward-list 单向链表 比list的空间少 指针的空间</li>\n</ol>\n<p>associative containers --》查找非常快 – 》红黑树（高度平衡树）</p>\n<ol>\n<li>set  不分key value</li>\n<li>map 结点是key value</li>\n<li>multiset</li>\n<li>multimap</li>\n</ol>\n<p>放置的东西不是独一无二的，就不能用set map</p>\n<p>（unordered containers 所属上边类型  无序，无组织） --》散列表</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310210030871.png\" alt=\"image-20230310210030871\"></p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230310210730294.png\" alt=\"image-20230310210730294\"></p>\n<p>容器的效率</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取一个目标值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"title\">get_a_target</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> target = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; target(0 - &quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class=\"string\">&quot;):&quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; target;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//将目标值以字符串形式返回</span></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">get_a_target</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">long</span> target = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">char</span> buf[<span class=\"number\">10</span>];</span><br><span class=\"line\">\tcout &lt;&lt; <span class=\"string\">&quot; target(0 - &quot;</span> &lt;&lt; RAND_MAX &lt;&lt; <span class=\"string\">&quot;):&quot;</span>;</span><br><span class=\"line\">\tcin &gt;&gt; target;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">snprintf</span>(buf,<span class=\"number\">10</span>,<span class=\"string\">&quot;%d&quot;</span>,target); <span class=\"comment\">//将其转换为字符串</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(buf);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">compareLongs</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span>*a,<span class=\"type\">const</span> <span class=\"type\">void</span>*b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (*(<span class=\"type\">long</span>*)a - *(<span class=\"type\">long</span>*)b )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"built_in\">compareLongs</span>(<span class=\"type\">const</span> <span class=\"type\">void</span>*a,<span class=\"type\">const</span> <span class=\"type\">void</span>*b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(*(string*)a &gt; *(string*)b ) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*(string*)a &lt; *(string*)b ) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> reuturn <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//使用array容器</span><br><span class=\"line\">//array 一定要有第二个参数，定义大小，只能是常数</span><br><span class=\"line\">array&lt;long,1000&gt; c;</span><br><span class=\"line\">for(long i =0; i &lt; 1000; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tc[i] = rand();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"end\">end</h1>\n","tags":["aaa"]},{"title":"设计模式","url":"/post/41682.html","content":"<p>简述：完成对设计模式的分解</p>\n<span id=\"more\"></span>\n<h3 id=\"设计模式\">设计模式</h3>\n<h2 id=\"什么是设计模式？\">什么是设计模式？</h2>\n<p>将常见的问题统一成一致的解决方式，不需要再去造轮子；</p>\n<p>设计模式：可复用面向对象软件</p>\n<p>面向对象的设计模式：</p>\n<p>面向对象：</p>\n<p>底层思维：向下，把握机器底层的对象构造</p>\n<ol>\n<li>编译</li>\n<li>内存</li>\n<li>运行的机制</li>\n<li>语言构造</li>\n</ol>\n<p>抽象思维：向上，将现实世界抽象为程序代码</p>\n<ol>\n<li>面向对象</li>\n<li>组件封装</li>\n<li>设计模式</li>\n<li>架构模式</li>\n</ol>\n<p>更好的管理代码</p>\n<h2 id=\"面向对象\">面向对象</h2>\n<p>向下：</p>\n<p>封装：隐藏内部细节</p>\n<p>继承：代码复用</p>\n<p>多态：动态绑定，改写对象的行为</p>\n<p>向上：</p>\n<p>理解面向对象的抽象，理解如何使用机制来表达现实世界</p>\n<p>软件设计固有的复杂性：</p>\n<p>需求的变更，导致对软件的冲击</p>\n<p>变化</p>\n<p>解决复杂性：</p>\n<p>分解：分而治之</p>\n<p><strong>抽象</strong></p>\n<p>提升复用性</p>\n<p>好的软件设计：复用</p>\n<p>面向对象的优势：抵御变化</p>\n<p>隔离变化，将变化的影响降到最小</p>\n<p>各司其职，不影响原来的代码实现</p>\n<h2 id=\"面向对象的设计原则\">面向对象的设计原则</h2>\n<h3 id=\"\"></h3>\n<p>设计模式依赖设计原则来实现</p>\n<h3 id=\"依赖倒置原则-dip\">依赖倒置原则 DIP</h3>\n<p>高层模块（稳定）不应该依赖于低层模块（变化），二者都应该依赖于抽象（稳定）</p>\n<p>抽象（稳定）不应该依赖于实现细节（变化），实现细节应该依赖于抽象</p>\n<p>稳定依赖稳定，不稳定依赖稳定</p>\n<h3 id=\"开放封闭原则-ocp\">开放封闭原则 OCP</h3>\n<p>对拓展开放，对修改封闭</p>\n<p>类模块可拓展，但是不能修改</p>\n<h3 id=\"单一职责原则-srp\">单一职责原则 SRP</h3>\n<p>一个类应该只有一个引起它变化的原因</p>\n<p>变化的方向隐含着类的<strong>责任</strong></p>\n<p>类不要太臃肿，不能含有多个责任</p>\n<h3 id=\"liskov替换原则-lsp\">Liskov替换原则 LSP</h3>\n<p>子类必须能够替换基类</p>\n<h3 id=\"接口隔离原则-isp\">接口隔离原则 ISP</h3>\n<p>接口应该小而完备</p>\n<p>不应该强迫程序使用不需要的方法</p>\n<h3 id=\"优先使用对象组合，而不是类继承\">优先使用对象组合，而不是类继承</h3>\n<p>类继承：白箱复用</p>\n<p>对象组合：黑箱复用</p>\n<p>继承某种程度上破坏了封装性，子类父类耦合度高</p>\n<p>对象组合只要求被组合对象具有良好定义的接口</p>\n<h3 id=\"封装变化点\">封装变化点</h3>\n<p>使用封装来创建对象之间的分界层，一侧变化，一侧稳定</p>\n<h3 id=\"针对接口编程，而不是针对实现编程\">针对接口编程，而不是针对实现编程</h3>\n<p>不将变量类型声明为某个特定的具体类，而是声明为某个接口。</p>\n<p>客户程序无需获知对象的具体类型，只需要知道接口</p>\n<p>减少系统各部分的依赖关系，实现高内聚松耦合</p>\n<p>==》面向接口设计：接口标准化–&gt;产业强盛</p>\n<p>将设计原则提升为设计经验</p>\n<ol>\n<li>设计习语 描述与特定编程语言相关的低层模式</li>\n<li>设计模式 类与相互通信的对象之间的组织关系 --》变化中的复用</li>\n<li>架构模式 描述系统中与基本结构组织关系密切的高层模式</li>\n</ol>\n<p>设计模式分类：</p>\n<p>目的：</p>\n<ol>\n<li>创建型 对象的创建等</li>\n<li>结构型 应对需求变化对结构的冲击</li>\n<li>行为型 对象与对象之间的职责</li>\n</ol>\n<p>实现手段：</p>\n<ol>\n<li>类模式 处理类和子类的静态关系 继承</li>\n<li>对象模式 对象间的动态关系 对象包含</li>\n</ol>\n<p>好的面向对象设计：应对变化，提高复用</p>\n<p>–》寻找变化点，在变化点处应用设计模式</p>\n<p>重要的是理解什么时候什么地点应用设计模式</p>\n<p>敏捷软件开发提倡重构对象模式</p>\n<p>重构关键方法：</p>\n<p>静态-》动态</p>\n<p>早绑定-》晚绑定</p>\n<p>继承-》对象组合</p>\n<p>编译时依赖-》运行时依赖</p>\n<p>紧耦合-》松耦合</p>\n<h2 id=\"组件协作模式\">组件协作模式</h2>\n<p>软件专业分工导致的结果就是“框架和应用”该模式通过晚期绑定，实现框架与应用程序之间的松耦合，是二者之间协作时常用的模式</p>\n<p>典型模式：</p>\n<p>template method</p>\n<p>strategy</p>\n<p>observer/event</p>\n<h4 id=\"模板方法-template method\">模板方法 template method</h4>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230330153325991.png\" alt=\"image-20230330153325991\"></p>\n<p>早绑定：library创建功能，app调用library里的功能</p>\n<p>晚绑定：将函数调用流程创建在library中，让其中的某些实现在app中完成</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230330193938805.png\" alt=\"image-20230330193938805\"></p>\n<p>假定所有功能都是稳定的，设计模式也就没有必要存在了，变化同理</p>\n<p>核心在于分辨出什么是稳定的，什么是变化的</p>\n<p><img src=\"C:%5CUsers%5Czxf%5CDesktop%5Cimage-20230330194513174.png\" alt=\"image-20230330194513174\"></p>\n<p><img src=\"C:%5CUsers%5Czxf%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20230330194543931.png\" alt=\"image-20230330194543931\"></p>\n<p>拓展：继承+虚函数（重写）</p>\n<p>思考变化和稳定的关系</p>\n<h4 id=\"策略模式\">策略模式</h4>\n<p>某些对象使用的算法多种多样，经常改变</p>\n<p>对拓展开放，对修改封闭 --》违背开闭原则</p>\n<p>将算法编程各种的子类</p>\n","categories":["页面","CSS","xioa"]},{"title":"我的第一篇mysql文章","url":"/post/4b9d6ef1.html","content":"<p>wode asdfj kldf sa</p>\n","categories":["数据库，mysql"],"tags":["mysql"]}]